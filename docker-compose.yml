services:
  postgres:
    image: postgres:16
    env_file: 
      - .env
    environment:
      POSTGRES_USER: "${APP_CONFIG__DB__USER}"
      POSTGRES_PASSWORD: "${APP_CONFIG__DB__PASSWORD}"
      POSTGRES_DB: "${APP_CONFIG__DB__DATABASE}"
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./app/.backups/test_backup_2025-04-07_10-54-10.dump:/docker-entrypoint-initdb.d/test_backup_2025-04-07_10-54-10.dump
#    command: bash -c "sleep 10 && pg_restore -U postgres -d test -h "0.0.0.0" -p 5432 --no-owner --no-acl --verbose /docker-entrypoint-initdb.d/test_backup_2025-04-07_10-54-10.dump && docker-entrypoint.sh postgres"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${APP_CONFIG__DB__USER} -d ${APP_CONFIG__DB__DATABASE}"]  # Добавил проверку конкретной БД
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build: 
      context: .
      dockerfile: Dockerfile  # Явно указать Dockerfile, если он не стандартный
    container_name: calendar-api
    env_file: 
      - .env
    restart: unless-stopped
    environment:
      DATABASE_URL: "postgresql://${APP_CONFIG__DB__USER}:${APP_CONFIG__DB__PASSWORD}@postgres:5432/${APP_CONFIG__DB__DATABASE}"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - app_network
#    command: bash -c "cd ./app && alembic upgrade head"
    # Добавьте healthcheck для app, если возможно
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app_network:
    driver: bridge
    # Добавьте эти настройки для лучшей изоляции
    name: calendar_api_network
    attachable: true

volumes:
  postgres_data:
    name: calendar_api_postgres_data  # Явное имя volume