name: Docker CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    env:
      PYTHON_VERSION: "3.11"
      NODE_VERSION: "18.x"
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/calendar-api

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/calendar-api
      DB_PORT: 5432
      RUN_HOST: 0.0.0.0

    steps:
      - uses: actions/checkout@v4

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SERVER_SSH_KEY }}
          known_hosts: unnecessary

      - name: Create .env file dynamically
        run: |
          cat << EOF > .env
          APP_CONFIG__DB__HOST=${{ secrets.DB_HOST }}
          APP_CONFIG__DB__PORT=5432
          APP_CONFIG__DB__USER=${{ secrets.DB_USER }}
          APP_CONFIG__DB__PASSWORD=${{ secrets.DB_PASSWORD }}
          APP_CONFIG__DB__DATABASE=${{ secrets.DB_DATABASE }}
          APP_CONFIG__SUPER_USER__EMAIL=${{ secrets.SUPER_USER_EMAIL }}
          APP_CONFIG__SUPER_USER__PASSWORD=${{ secrets.SUPER_USER_PASSWORD }}
          APP_CONFIG__ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          APP_CONFIG__EMAIL__PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          APP_CONFIG__EMAIL__PORT=${{ secrets.EMAIL_PORT }}
          APP_CONFIG__EMAIL__HOST=${{ secrets.EMAIL_HOST }}
          APP_CONFIG__CALENDAR__CALENDAR_ID=${{ secrets.CALENDAR_ID }}
          APP_CONFIG__CALENDAR__SECRET_FILE=${{ secrets.CALENDAR_SECRET_FILE }}
          APP_CONFIG__YANDEX_DISK__TOKEN=${{ secrets.YANDEX_DISK_TOKEN }}
          APP_CONFIG__ACCESS_TOKEN__RESET_PASSWORD_TOKEN_SECRET=${{ secrets.RESET_PASSWORD_TOKEN_SECRET }}
          APP_CONFIG__ACCESS_TOKEN__VERIFICATION_TOKEN_SECRET=${{ secrets.VERIFICATION_TOKEN_SECRET }}
          APP_CONFIG__SQL_ADMIN__SECRET=${{ secrets.SQL_ADMIN_SECRET }}
          APP_CONFIG__SQL_ADMIN__JWT_SECRET=${{ secrets.SQL_ADMIN_JWT_SECRET }}
          DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          TAG=${{ github.sha }}
          EOF

      - name: Deploy to production
        run: |
          mkdir -p /tmp/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > /tmp/.ssh/id_rsa
          chmod 600 /tmp/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SERVER_IP }} > /tmp/.ssh/known_hosts

          # Копируем необходимые файлы
          # Копируем всё, что нужно
          scp -o StrictHostKeyChecking=no \
              -i /tmp/.ssh/id_rsa \
              -r ./* \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/${{ secrets.SERVER_USER }}


          # Выполняем деплой
          ssh -o StrictHostKeyChecking=no \
              -i /tmp/.ssh/id_rsa \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "
                cd /home/${{ secrets.SERVER_USER }} &&
                docker compose down &&  # Останавливаем и удаляем старые контейнеры
                docker compose -f docker-compose.yml --env-file .env up -d --build &&
                rm -f .env  # Удаляем .env файл после использования
              "